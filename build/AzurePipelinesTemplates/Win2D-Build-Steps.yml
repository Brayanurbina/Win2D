parameters:
  isRelease: false
  codeSignInlineOperation: |
        [
          {
              "KeyCode" : "CP-230012",
              "OperationCode" : "SigntoolSign",
              "Parameters" : {
                  "OpusName" : "Microsoft",
                  "OpusInfo" : "http://www.microsoft.com",
                  "FileDigest" : "/fd \"SHA256\"",
                  "PageHash" : "/NPH",
                  "TimeStamp" : "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
              },
              "ToolName" : "sign",
              "ToolVersion" : "1.0"
          },
          {
              "KeyCode" : "CP-230012",
              "OperationCode" : "SigntoolVerify",
              "Parameters" : {},
              "ToolName" : "sign",
              "ToolVersion" : "1.0"
          }
        ]

steps:
- task: PkgESSetupBuild@10
  displayName: 'Setup Build'
  inputs:
    disableWorkspace: true
    useDfs: false

- ${{ if eq(parameters.isRelease, true) }}:
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-policheck.PoliCheck@1
    displayName: 'Run PoliCheck'
    inputs:
      inputType: CmdLine
      cmdLineArgs: '/F:$(Build.SourcesDirectory) /O:$(Build.SourcesDirectory)\bin\PoliCheck.xml /T:9 /SEV:"1|2|3|4" /SOM'
      SOMEnabled: true
      optionsFC: 1
      optionsXS: 1
      optionsSEV: '1|2|3|4'
      optionsWORKINGDIRECTORY: '$(Build.SourcesDirectory)'
  - task: MSBuild@1
    displayName: 'Build PoliCheckOutputParser'
    inputs:
      solution: 'build\pkges\PoliCheckOutputParser\PoliCheckOutputParser.csproj'
      platform: AnyCPU
      configuration: Release
  - task: CmdLine@1
    displayName: 'Run PoliCheckOutputParser'
    inputs:
      filename: 'build\pkges\PoliCheckOutputParser\bin\Release\PoliCheckOutputParser.exe'
      arguments: '$(Build.SourcesDirectory) ..\_sdt\logs\PoliCheck\PoliCheck.xml build\pkges\PoliCheckExclusions.txt bin\PoliCheck.txt'

- ${{ if ne(parameters.isRelease, true) }}:
  - task: CmdLine@1
    displayName: 'Ensure release branch not merged to master'
    inputs:
      filename: cmd
      arguments: '/c if exist build\pkges\PoliCheckExclusions.txt exit 1'

- task: UseDotNet@2
  displayName: 'Use .NET Core sdk'
  inputs:
    packageType: sdk
    includePreviewVersions: true
    useGlobalJson: true
    performMultiLevelLookup: true
    installationPath: $(Agent.ToolsDirectory)/dotnet
- task: PowerShell@1
  displayName: 'Download Nuget'
  inputs:
    scriptType: inlineScript
    inlineScript: |
      .$env:Build_SourcesDirectory\build\nuget\download-nuget.cmd
- task: PowerShell@1
  displayName: 'Nuget Restore'
  inputs:
    scriptType: inlineScript
    inlineScript: |
      $env:_MSBDIR="C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\"
      .$env:Build_SourcesDirectory\build\Enter-VSShell.ps1 -vsPath $env:_MSBDIR
      $env:PATH="$env:Build_SourcesDirectory\build\nuget;$env:PATH"
      .$env:Build_SourcesDirectory\build\nuget\nuget.exe restore ($env:Build_SourcesDirectory + "\build\pkges\packages.config") -PackagesDirectory ($env:Build_SourcesDirectory + "\packages")
      $env:Platform="AnyCPU"
      $env:Configuration="Release"
      .$env:Build_SourcesDirectory\build\nuget\nuget.exe restore .\Microsoft.Graphics.Win2D.sln
      rm env:Configuration
      rm env:Platform
- task: PowerShell@1
  displayName: 'Build Product'
  inputs:
    scriptType: inlineScript
    inlineScript: |
      $env:_MSBDIR="C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\"
      .$env:Build_SourcesDirectory\build\Enter-VSShell.ps1 -vsPath $env:_MSBDIR
      $env:PATH="$env:Build_SourcesDirectory\build\nuget;$env:PATH"
      msbuild "$env:Build_SourcesDirectory\Win2D.proj" /maxcpucount /p:BuildConfigurations=Release /p:BuildTests=false /p:BuildDocs=false /bl:logfile=win2d.product.binlog
- task: PublishBuildArtifacts@1
  displayName: 'Publish product binlogs'
  condition: Always()
  inputs:
    PathtoPublish: $(Build.SourcesDirectory)/win2d.product.binlog
    artifactName: 'binlogs'

- ${{ if eq(parameters.isRelease, true) }}:
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-binskim.BinSkim@3
    displayName: 'Run BinSkim '
    inputs:
      InputType: Basic
      AnalyzeTarget: 'bin\uapx86\release\winrt.dll.uap\Microsoft.Graphics.Canvas.dll;bin\uapx64\release\winrt.dll.uap\Microsoft.Graphics.Canvas.dll;bin\uaparm\release\winrt.dll.uap\Microsoft.Graphics.Canvas.dll;bin\uaparm64\release\winrt.dll.uap\Microsoft.Graphics.Canvas.dll'
      AnalyzeConfigPath: '"build\pkges\BinSkimConfig.xml"'
      AnalyzeVerbose: true
      toolVersion: LatestPreRelease
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@1
    displayName: 'Post Analysis'
    inputs:
      BinSkim: true
      BinSkimBreakOn: WarningAbove
  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: 'Component Detection'

  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    displayName: 'CodeSign (x86)'
    inputs:
      ConnectedServiceName: 'ESRP Signing'
      FolderPath: '$(Build.SourcesDirectory)\bin\uapx86\Release\winrt.dll.uap\'
      Pattern: 'Microsoft.Graphics.Canvas.dll, Microsoft.Graphics.Canvas.winmd'
      signConfigType: inlineSignParams
      inlineOperation: ${{ parameters.codeSignInlineOperation }}
  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    displayName: 'CodeSign (x64)'
    inputs:
      ConnectedServiceName: 'ESRP Signing'
      FolderPath: '$(Build.SourcesDirectory)\bin\uapx64\Release\winrt.dll.uap\'
      Pattern: 'Microsoft.Graphics.Canvas.dll, Microsoft.Graphics.Canvas.winmd'
      signConfigType: inlineSignParams
      inlineOperation: ${{ parameters.codeSignInlineOperation }}
  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    displayName: 'CodeSign (ARM64)'
    inputs:
      ConnectedServiceName: 'ESRP Signing'
      FolderPath: '$(Build.SourcesDirectory)\bin\uapARM64\Release\winrt.dll.uap\'
      Pattern: 'Microsoft.Graphics.Canvas.dll, Microsoft.Graphics.Canvas.winmd'
      signConfigType: inlineSignParams
      inlineOperation: ${{ parameters.codeSignInlineOperation }}

- task: BatchScript@1
  displayName: 'build-nupkg'
  inputs:
    filename: 'build/nuget/build-nupkg.cmd'
    ${{ if eq(parameters.isRelease, true) }}:
      arguments: signed $(version)
    ${{ if ne(parameters.isRelease, true) }}:
      arguments: $(version)


- ${{ if eq(parameters.isRelease, true) }}:
  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    displayName: 'CodeSign (NuGet)'
    inputs:
      ConnectedServiceName: 'ESRP Signing'
      FolderPath: '$(Build.SourcesDirectory)\bin\'
      Pattern: '*.nupkg'
      signConfigType: inlineSignParams
      inlineOperation: | 
        [
          {
              "KeyCode" : "CP-401405",
              "OperationCode" : "NuGetSign",
              "Parameters" : {},
              "ToolName" : "sign",
              "ToolVersion" : "1.0"
          },
          {
              "KeyCode" : "CP-401405",
              "OperationCode" : "NuGetVerify",
              "Parameters" : {},
              "ToolName" : "sign",
              "ToolVersion" : "1.0"
          }
        ]

# - task: PowerShell@1
#   displayName: 'Zip docs'
#   continueOnError: true 
#   inputs:
#     scriptType: inlineScript
#     inlineScript: |
#      Add-Type -Assembly System.IO.Compression.FileSystem;
#      [System.IO.Compression.ZipFile]::CreateFromDirectory("bin\docs", "bin\docs.zip")

- task: PublishBuildArtifacts@1
  displayName: 'Publish binaries'
  inputs:
    PathtoPublish: $(Build.SourcesDirectory)/bin
    artifactName: 'bin'
- task: CopyFiles@1
  displayName: 'Copy Files to: $(XES_DFSDROP)'
  inputs:
    Contents: |
     bin\signed\**
     bin\docs.zip
     bin\uapx86\release\winrt.dll.uap\Microsoft.Graphics.Canvas.pdb
     bin\uapx64\release\winrt.dll.uap\Microsoft.Graphics.Canvas.pdb
     bin\uaparm64\release\winrt.dll.uap\Microsoft.Graphics.Canvas.pdb
    TargetFolder: '$(XES_DFSDROP)'
  condition: succeededOrFailed()

- task: CopyFiles@1
  displayName: 'Copy Nuget package to: $(Build.SourcesDirectory)/nugetartifact'
  inputs:
    Contents: |
     bin\**\*.nupkg
    TargetFolder: '$(Build.SourcesDirectory)/nugetartifact'

- task: PublishBuildArtifacts@1
  displayName: 'Publish nupkg artifact'
  inputs:
    PathtoPublish: $(Build.SourcesDirectory)/nugetartifact
    artifactName: 'nuget'
