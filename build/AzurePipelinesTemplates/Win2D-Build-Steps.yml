parameters:
  isRelease: false
  sdkVersion: 17763
  codeSignInlineOperation: |
        [
          {
              "KeyCode" : "CP-230012",
              "OperationCode" : "SigntoolSign",
              "Parameters" : {
                  "OpusName" : "Microsoft",
                  "OpusInfo" : "http://www.microsoft.com",
                  "FileDigest" : "/fd \"SHA256\"",
                  "PageHash" : "/NPH",
                  "TimeStamp" : "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
              },
              "ToolName" : "sign",
              "ToolVersion" : "1.0"
          },
          {
              "KeyCode" : "CP-230012",
              "OperationCode" : "SigntoolVerify",
              "Parameters" : {},
              "ToolName" : "sign",
              "ToolVersion" : "1.0"
          }
        ]
  winappsdk_version: ""
  version: ""
  is_nightly_pipeline: false

steps:
- script: |
    echo "Win2D Package Version: $(version)"
    echo ##vso[build.updatebuildnumber]$(version)
  displayName: Set Build Number
- ${{ if eq(parameters.isRelease, true) }}:
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-policheck.PoliCheck@1
    displayName: 'Run PoliCheck'
    inputs:
      inputType: CmdLine
      cmdLineArgs: '/F:$(Build.SourcesDirectory) /O:$(Build.SourcesDirectory)\bin\PoliCheck.xml /T:9 /SEV:"1|2|3|4" /SOM'
      SOMEnabled: true
      optionsFC: 1
      optionsXS: 1
      optionsSEV: '1|2|3|4'
      optionsWORKINGDIRECTORY: '$(Build.SourcesDirectory)'
  - task: MSBuild@1
    displayName: 'Build PoliCheckOutputParser'
    inputs:
      solution: 'build\pkges\PoliCheckOutputParser\PoliCheckOutputParser.csproj'
      platform: AnyCPU
      configuration: Release
  - task: CmdLine@1
    displayName: 'Run PoliCheckOutputParser'
    inputs:
      filename: 'build\pkges\PoliCheckOutputParser\bin\Release\PoliCheckOutputParser.exe'
      arguments: '$(Build.SourcesDirectory) ..\_sdt\logs\PoliCheck\PoliCheck.xml build\pkges\PoliCheckExclusions.txt bin\PoliCheck.txt'

- ${{ if ne(parameters.isRelease, true) }}:
  - task: CmdLine@1
    displayName: 'Ensure release branch not merged to master'
    inputs:
      filename: cmd
      arguments: '/c if exist build\pkges\PoliCheckExclusions.txt exit 1'

# Print the WinAppSDK version number to be consumed by build\WindowsAppSDK.common.props
- script: |
    echo "WinAppSDK version override (optional): $(winappsdk_version)"
    
    if "$(winappsdk_version)"=="" (
      echo "WinAppSDK version override not set, defaulting to version in build\WindowsAppSdk.common.props"
    )
  displayName: Display WinAppSDK version

# Use .NET Core SDK
- task: UseDotNet@2
  displayName: 'Use .NET Core sdk'
  inputs:
    packageType: sdk
    includePreviewVersions: true
    useGlobalJson: true
    performMultiLevelLookup: true
    installationPath: $(Agent.ToolsDirectory)/dotnet
- task: powershell@2
  inputs:
    targetType: filePath
    filePath: build\Install-WindowsSdkISO.ps1
    arguments: ${{ parameters.sdkVersion }}
  displayName: 'Install Insider SDK (${{ parameters.sdkVersion }})'
- task: PowerShell@1
  displayName: 'Download Nuget'
  inputs:
    scriptType: inlineScript
    inlineScript: |
      .$env:Build_SourcesDirectory\build\nuget\download-nuget.cmd
- task: powershell@2
  displayName: 'Set Nuget source to Azure feed'
  condition: and(succeeded(), ne(variables.is_nightly_pipeline, 'true'))
  inputs:
    targetType: inline
    # Reads the WinAppSDK Version from eng\Version.Details.xml
    # Used to read the nightly WinAppSDK version for building nightly versions of Win2D
    script: |
      $oldNugetConfig = "$env:Build_SourcesDirectory\nuget.config"
      $newNugetConfig = "$env:Build_SourcesDirectory\build\nuget\azure_pipelines_nuget.config"

      $xmlDoc = [xml](Get-Content $newNugetConfig)
      Write-Host "Found nuget.config file."
      Write-Host "Setting package source to Azure nuget feed to '$(WIN2D_AZURE_NUGET_FEED)'..."

      $xmlDoc.configuration.packageSourceCredentials.Win2D_PublicPackages.add | Where-Object key -eq 'ClearTextPassword' | ForEach-Object {
        $_.SetAttribute("value", "%WIN2D_FEED_PAT%");
        Write-Host "Set the attribute for the Win2D feed to pick up the pipeline variable"
      }
      $xmlDoc.Save($newNugetConfig)

      Remove-Item $oldNugetConfig
      Copy-Item $newNugetConfig -Destination $oldNugetConfig

      Write-Host "nuget.config now contains:"
      Get-Content -Path $env:Build_SourcesDirectory\nuget.config
- task: PowerShell@1
  displayName: 'Nuget Restore'
  env:
    REUNION_FEED: $(REUNION_FEED)
    WIN2D_FEED_PAT: $(WIN2D_FEED_PAT)
    WIN2D_AZURE_NUGET_FEED: $(WIN2D_AZURE_NUGET_FEED)
  inputs:
    scriptType: inlineScript
    inlineScript: |
      $env:_MSBDIR="C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\"
      .$env:Build_SourcesDirectory\build\Enter-VSShell.ps1 -vsPath $env:_MSBDIR
      $env:PATH="$env:Build_SourcesDirectory\build\nuget;$env:PATH"
      .$env:Build_SourcesDirectory\build\nuget\nuget.exe restore ($env:Build_SourcesDirectory + "\build\pkges\packages.config") -PackagesDirectory ($env:Build_SourcesDirectory + "\packages") -configFile ($env:Build_SourcesDirectory + "\nuget.config") -NonInteractive
      $env:Platform="AnyCPU"
      $env:Configuration="Release"
      .$env:Build_SourcesDirectory\build\nuget\nuget.exe restore .\Microsoft.Graphics.Win2D.sln -PackagesDirectory ($env:Build_SourcesDirectory + "\packages") -configFile ($env:Build_SourcesDirectory + "\nuget.config") -NonInteractive
      rm env:Configuration
      rm env:Platform

# telemetry tasks
- task: NuGetAuthenticate@0
  inputs:
    nuGetServiceConnections: Win2DWinUI

- task: CmdLine@2
  displayName: Moving telem files
  inputs:
    script: |
      call nuget.exe restore -NonInteractive -configFile $(Build.SourcesDirectory)/release-nuget.config -PackagesDirectory $(Build.SourcesDirectory)/packages $(Build.SourcesDirectory)/build/release-pkges/packages.config || exit /b 1
      del $(Build.SourcesDirectory)\winrt\inc\MicrosoftTelemetry.h || exit /b 1
      move /Y $(Build.SourcesDirectory)\packages\Microsoft.Win2D.Telemetry.1.0.2\build\include\MicrosoftTelemetry.h $(Build.SourcesDirectory)\winrt\inc\MicrosoftTelemetry.h || exit /b 1
# end telemetry tasks

- task: PowerShell@1
  displayName: 'Build Product'
  inputs:
    scriptType: inlineScript
    inlineScript: |
      $env:_MSBDIR="C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\"
      .$env:Build_SourcesDirectory\build\Enter-VSShell.ps1 -vsPath $env:_MSBDIR
      $env:PATH="$env:Build_SourcesDirectory\build\nuget;$env:PATH"
      msbuild "$env:Build_SourcesDirectory\Win2D.proj" /maxcpucount /p:BuildConfigurations=Release /p:BuildTests=false /p:BuildDocs=false /bl:logfile=win2d.product.binlog
- task: PublishBuildArtifacts@1
  displayName: 'Publish product binlogs'
  condition: Always()
  inputs:
    PathtoPublish: $(Build.SourcesDirectory)/win2d.product.binlog
    artifactName: 'binlogs'

- ${{ if eq(parameters.isRelease, true) }}:
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-binskim.BinSkim@3
    displayName: 'Run BinSkim '
    inputs:
      InputType: Basic
      AnalyzeTarget: 'bin\uapx86\release\winrt.dll.uap\Microsoft.Graphics.Canvas.dll;bin\uapx64\release\winrt.dll.uap\Microsoft.Graphics.Canvas.dll;bin\uaparm\release\winrt.dll.uap\Microsoft.Graphics.Canvas.dll;bin\uaparm64\release\winrt.dll.uap\Microsoft.Graphics.Canvas.dll'
      AnalyzeConfigPath: '"build\pkges\BinSkimConfig.xml"'
      AnalyzeVerbose: true
      toolVersion: LatestPreRelease
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@1
    displayName: 'Post Analysis'
    inputs:
      BinSkim: true
      BinSkimBreakOn: WarningAbove
  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: 'Component Detection'

  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    displayName: 'CodeSign (x86)'
    inputs:
      ConnectedServiceName: 'ESRP Signing'
      FolderPath: '$(Build.SourcesDirectory)\bin\uapx86\Release\winrt.dll.uap\'
      Pattern: 'Microsoft.Graphics.Canvas.dll, Microsoft.Graphics.Canvas.winmd'
      signConfigType: inlineSignParams
      inlineOperation: ${{ parameters.codeSignInlineOperation }}
  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    displayName: 'CodeSign (x64)'
    inputs:
      ConnectedServiceName: 'ESRP Signing'
      FolderPath: '$(Build.SourcesDirectory)\bin\uapx64\Release\winrt.dll.uap\'
      Pattern: 'Microsoft.Graphics.Canvas.dll, Microsoft.Graphics.Canvas.winmd'
      signConfigType: inlineSignParams
      inlineOperation: ${{ parameters.codeSignInlineOperation }}
  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    displayName: 'CodeSign (ARM64)'
    inputs:
      ConnectedServiceName: 'ESRP Signing'
      FolderPath: '$(Build.SourcesDirectory)\bin\uapARM64\Release\winrt.dll.uap\'
      Pattern: 'Microsoft.Graphics.Canvas.dll, Microsoft.Graphics.Canvas.winmd'
      signConfigType: inlineSignParams
      inlineOperation: ${{ parameters.codeSignInlineOperation }}

- task: BatchScript@1
  displayName: 'build-nupkg'
  inputs:
    filename: 'build/nuget/build-nupkg.cmd'
    ${{ if eq(parameters.isRelease, true) }}:
      arguments: signed $(version)
    ${{ if ne(parameters.isRelease, true) }}:
      arguments: $(version)


- ${{ if eq(parameters.isRelease, true) }}:
  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    displayName: 'CodeSign (NuGet)'
    inputs:
      ConnectedServiceName: 'ESRP Signing'
      FolderPath: '$(Build.SourcesDirectory)\bin\'
      Pattern: '*.nupkg'
      signConfigType: inlineSignParams
      inlineOperation: |
        [
          {
              "KeyCode" : "CP-401405",
              "OperationCode" : "NuGetSign",
              "Parameters" : {},
              "ToolName" : "sign",
              "ToolVersion" : "1.0"
          },
          {
              "KeyCode" : "CP-401405",
              "OperationCode" : "NuGetVerify",
              "Parameters" : {},
              "ToolName" : "sign",
              "ToolVersion" : "1.0"
          }
        ]

# - task: PowerShell@1
#   displayName: 'Zip docs'
#   continueOnError: true
#   inputs:
#     scriptType: inlineScript
#     inlineScript: |
#      Add-Type -Assembly System.IO.Compression.FileSystem;
#      [System.IO.Compression.ZipFile]::CreateFromDirectory("bin\docs", "bin\docs.zip")

- task: PublishBuildArtifacts@1
  displayName: 'Publish binaries'
  inputs:
    PathtoPublish: $(Build.SourcesDirectory)/bin
    artifactName: 'bin'
    
# - task: CopyFiles@1
#   displayName: 'Copy Files to: $(XES_DFSDROP)'
#   inputs:
#     Contents: |
#      bin\signed\**
#      bin\docs.zip
#      bin\uapx86\release\winrt.dll.uap\Microsoft.Graphics.Canvas.pdb
#      bin\uapx64\release\winrt.dll.uap\Microsoft.Graphics.Canvas.pdb
#      bin\uaparm64\release\winrt.dll.uap\Microsoft.Graphics.Canvas.pdb
#     TargetFolder: '$(XES_DFSDROP)'
#   condition: succeededOrFailed()

- task: PublishSymbols@2
  displayName: 'Publish symbols to symbol server'
  inputs:
    SymbolsFolder: '$(Build.SourcesDirectory)'
    SearchPattern: 'bin/**/Microsoft.Graphics.Canvas.pdb'
    #IndexSources: true # boolean. Index sources. Default: true.
    #PublishSymbols: true # boolean. Publish symbols. Default: true.
    SymbolServerType: 'TeamServices'
    #SymbolsPath: # string. Optional. Use when PublishSymbols = true && SymbolServerType = FileShare. Path to publish symbols. 
    #CompressSymbols: false # boolean. Required when SymbolServerType = FileShare. Compress symbols. Default: false.
    #SymbolExpirationInDays: '36530' # string. Optional. Use when PublishSymbols = true && SymbolServerType = TeamServices. Symbol Expiration (in days). Default: '36530'.

- task: CopyFiles@1
  displayName: 'Copy Nuget package to: $(Build.SourcesDirectory)/nugetartifact'
  inputs:
    Contents: |
     bin\**\*.nupkg
    TargetFolder: '$(Build.SourcesDirectory)/nugetartifact'

- task: PublishBuildArtifacts@1
  displayName: 'Publish nupkg artifact'
  inputs:
    PathtoPublish: $(Build.SourcesDirectory)/nugetartifact
    artifactName: 'nuget'
