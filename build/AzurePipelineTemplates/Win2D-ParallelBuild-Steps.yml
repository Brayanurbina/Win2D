parameters:
  BuildTests: false
  RunTests: false
  BuildDocs: true
  BuildTools: true
  PublishBinaries: true
  # sdkVersion: 18362
  codeSignInlineOperation: |
        [
          {
              "KeyCode" : "CP-230012",
              "OperationCode" : "SigntoolSign",
              "Parameters" : {
                  "OpusName" : "Microsoft",
                  "OpusInfo" : "http://www.microsoft.com",
                  "FileDigest" : "/fd \"SHA256\"",
                  "PageHash" : "/NPH",
                  "TimeStamp" : "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
              },
              "ToolName" : "sign",
              "ToolVersion" : "1.0"
          },
          {
              "KeyCode" : "CP-230012",
              "OperationCode" : "SigntoolVerify",
              "Parameters" : {},
              "ToolName" : "sign",
              "ToolVersion" : "1.0"
          }
        ]

steps:
# Ensure that release branch was not merged back into master
- task: CmdLine@1
  displayName: Ensure release branch not merged to master
  inputs:
    filename: cmd
    arguments: /c if exist build\pkges\PoliCheckExclusions.txt exit 1
# Download nuget.exe
- task: BatchScript@1
  displayName: Run download-nuget.cmd
  inputs:
    filename: build\nuget\download-nuget.cmd
# Nuget authentication
- task: NuGetAuthenticate@1
  displayName: NuGet Authenticate
  inputs:
    nuGetServiceConnections: Win2DWinUI
# Restore telemetry files
- task: CmdLine@2
  displayName: Move telemetry files
  inputs:
    script: "call nuget.exe restore -NonInteractive -configFile $(Build.SourcesDirectory)/release-nuget.config -PackagesDirectory $(Build.SourcesDirectory)/packages $(Build.SourcesDirectory)/build/release-pkges/packages.config || exit /b 1\n      \ndel $(Build.SourcesDirectory)\\winrt\\inc\\MicrosoftTelemetry.h || exit /b 1\n      \nmove /Y $(Build.SourcesDirectory)\\packages\\Microsoft.Win2D.Telemetry.1.0.2\\build\\include\\MicrosoftTelemetry.h $(Build.SourcesDirectory)\\winrt\\inc\\MicrosoftTelemetry.h || exit /b 1"

# Build Win2D
- task: MSBuild@1
  displayName: Build Win2D.proj
  inputs:
    solution: Win2D.proj
    msbuildVersion: 17.0
    configuration: Release
    msbuildArguments: /p:BuildTests=${{ parameters.BuildTests }} /p:BuildDocs=${{ parameters.BuildDocs }} /p:BuildTools=${{ parameters.BuildTools }} /p:RunTests=false /p:BuildPlatforms="$(architecture)" /p:BuildConfigurations="$(buildConfiguration)"
    maximumCpuCount: true

# Run Tests
- task: PowerShell@2
  displayName: Install Test AppX
  condition: ${{ parameters.RunTests }}
  inputs:
    targetType: 'inline'
    script: |
      Import-Certificate -FilePath $(Build.SourcesDirectory)\bin\$(binDirectory)\$(buildConfiguration)\winrt.test.managed.uap\AppPackages\winrt.test.managed.uap_1.0.0.0_$(architecture)_Test\winrt.test.managed.uap_1.0.0.0_$(architecture).cer -CertStoreLocation Cert:\LocalMachine\Root\
      Import-Certificate -FilePath $(Build.SourcesDirectory)\bin\$(binDirectory)\$(buildConfiguration)\winrt.test.external.uap\AppPackages\winrt.test.external.uap_1.0.0.0_$(architecture)_Test\winrt.test.external.uap_1.0.0.0_$(architecture).cer -CertStoreLocation Cert:\LocalMachine\Root\
      # $(Build.SourcesDirectory)\bin\$(binDirectory)\$(buildConfiguration)\winrt.test.managed.uap\AppPackages\winrt.test.managed.uap_1.0.0.0_$(architecture)_Test\Install.ps1
      # $(Build.SourcesDirectory)\bin\$(binDirectory)\$(buildConfiguration)\winrt.test.external.uap\AppPackages\winrt.test.external.uap_1.0.0.0_$(architecture)_Test\Install.ps1
- task: VSTest@2
  displayName: Run Internal Tests
  condition: ${{ parameters.RunTests }}
  inputs:
    # Internal tests
    testSelector: 'testAssemblies'
    testAssemblyVer2: '**\winrt.test.internal.uap.dll'
    searchFolder: '$(Build.SourcesDirectory)\bin'
- task: VSTest@2
  displayName: Run Managed Tests
  condition: ${{ parameters.RunTests }}
  inputs:
    # Managed tests
    testSelector: 'testAssemblies'
    testAssemblyVer2: '**\winrt.test.managed.uap\**\*test*.appx'
    searchFolder: '$(Build.SourcesDirectory)\bin'
- task: VSTest@2
  displayName: Run External Tests
  condition: ${{ parameters.RunTests }}
  inputs:
    # External tests
    testSelector: 'testAssemblies'
    testAssemblyVer2: '**\winrt.test.external.uap\**\*test*.appx'
    searchFolder: '$(Build.SourcesDirectory)\bin'

##### Publish build output #####
# Copy binaries to artifact staging directory
- task: CopyFiles@2
  displayName: 'Copy Binaries to ArtifactStagingDirectory'
  condition: and(succeeded(), ${{ parameters.PublishBinaries }})
  inputs:
    SourceFolder: $(Build.SourcesDirectory)
    TargetFolder: $(Build.ArtifactStagingDirectory)
    Contents: |
      bin\**\Microsoft.Graphics.Canvas.pdb
      bin\**\Microsoft.Graphics.Canvas.dll
      obj\Win2d.githash.txt
# Copy WinMD and header files to the artifact staging directory from the x86 build to avoid duplicates
- task: CopyFiles@2
  displayName: 'Copy WinMD and Header to ArtifactStagingDirectory'
  condition: | 
    and(succeeded(),
    and(${{ parameters.PublishBinaries }},
    eq(variables.architecture, 'Win32;AnyCPU') ))
  inputs:
    SourceFolder: $(Build.SourcesDirectory)
    TargetFolder: $(Build.ArtifactStagingDirectory)
    Contents: |
      bin\UAPx86\*\IdlHeader\Microsoft.Graphics.Canvas.h
      bin\UAPx86\*\winrt.dll.UAP\Microsoft.Graphics.Canvas.winmd
  # Copy intellisense to the artifact staging directory from the x86 release build to avoid duplicates
- task: CopyFiles@2
  displayName: 'Copy Intellisense to: $(Build.ArtifactStagingDirectory)'
  condition: | 
    and(succeeded(),
    and(${{ parameters.PublishBinaries }},
    and(eq(variables.architecture, 'Win32;AnyCPU'),
    eq(variables.buildConfiguration, 'Release') )))
  inputs:
    SourceFolder: $(Build.SourcesDirectory)
    TargetFolder: $(Build.ArtifactStagingDirectory)
    Contents: |
      bin\intellisense\Microsoft.Graphics.Canvas.xml
# Publish binary artifact
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: build_output'
  condition: and(succeeded(), ${{ parameters.PublishBinaries }})
  inputs:
    ArtifactName: 'build_output'
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
# Publish symbols
- task: PublishSymbols@2
  displayName: Publish symbols path
  #TODO - make this a build param, limit the number of days
  condition: |
    and(succeeded(),
    and(${{ parameters.PublishBinaries }},
    false ))
  inputs:
    SearchPattern: '**/bin/**/release/winrt.dll.uap/Microsoft.Graphics.Canvas.pdb'
    SymbolServerType: TeamServices